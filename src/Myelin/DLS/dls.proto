syntax = "proto3";

package dls;

message BaseboardConfig {
  message DACControl {
    uint32 gain = 1;
    uint32 buf = 2;
    uint32 vdo = 3;
  }

  enum Dac {
    DAC25 = 0;
    DAC12 = 1;
  };

  message DACChannelConfig {
    string name = 1;
    Dac dac = 2;
    uint32 channel = 3;
    uint32 value = 4;
  }

  message ADCAmplifierControl {
    bool power_mode = 1;
    uint32 bandpass_filter = 2;
    bool preamplify = 3;
    uint32 ladder_attenuation = 4;
  };

  ADCAmplifierControl adc_amplifier_control = 1;
  DACControl dac_control = 2;
  repeated DACChannelConfig dac_channel_config = 3;
}

message ChipConfig {
  message RateCounter {
    repeated uint32 rate = 1;
    uint32 enable_mask = 2;
    bool clear_on_read = 3;
    bool fire_interrupt = 4;
  };

  message CorrelationConfig {
    uint32 sense_delay = 1;
    uint32 reset_delay = 2;
    uint32 reset_delay_2 = 3;    
  };

  message Neurons {
    enum FireOutMode {
      FIRE_OUT_DISABLE = 0;
      FIRE_OUT_ENABLE = 1;
      FIRE_OUT_BYPASS_EXCITATORY = 2;
      FIRE_OUT_BYPASS_INHIBITORY = 3;
    };
    enum MuxReadoutMode {
      VMEM = 0;
      EPSP = 1;
      IPSP = 2;
      FIRE = 3;
    };
    message NeuronControl {
      bool digital_out = 1;
      uint32 post_length = 2;
      bool external_post = 3;
      bool disable_spike_comparator = 4;
    }
    message NeuronDigital {
      bool excitatory_synaptic_input = 1;
      bool inhibitory_synaptic_input = 2;
      bool high_conductance_mode = 3;
      bool enable_input = 4;
      bool enable_output = 5;
      bool enable_leak = 6;
      bool enable_bigcap = 7;
      bool enable_smallcap = 8;
      FireOutMode fire_out_mode = 9;
      MuxReadoutMode mux_readout_mode = 10;
    };    
    repeated NeuronDigital neuron_digital = 1;
    NeuronControl neuron_control = 2;
  }

  message SynapseMemory {
    repeated uint32 weight = 1;
    repeated uint32 address = 2;
    repeated uint32 config = 3;
    repeated uint32 top_config = 4;
    repeated uint32 bottom_config = 5;
  };

  message SynapseMemoryConfig {
    uint32 pc_conf = 1;
    uint32 w_conf = 2;
    uint32 wait_ctr_clear = 3;
  }

  message SynapseDriver {
    uint32 senx = 1;
    uint32 seni = 2;
    uint32 pulse_length = 3;
  };

  message CapacitiveMemory {
    enum VrefSelect {
      VREF_V = 0;
      VREF_I = 1;
    };
    enum IoutSelect {
      IOUT_MUX = 0;
      IOUT_RAMP = 1;
    };
    message Config {
      uint32 mux_row_enables = 1;
      uint32 mux_col_enable = 2;
      bool vref_out_enable = 3;
      VrefSelect vref_select = 4;
      uint32 out_amp_bias = 5;
      uint32 sourcefollower_bias = 6;
      uint32 levelshifter_bias = 7;
      uint32 rampbuf_bias = 8;
      uint32 rconf = 9;
      bool iout_enable = 10;
      IoutSelect iout_select = 11;
      uint32 boost_factor = 12;
      bool autoboost = 13;
      bool boost = 14;
      bool enable = 15;
      uint32 prescale_pause = 16;
      uint32 prescale_ramp = 17;
      uint32 subcounter = 18;
      uint32 pulse_a = 19;
      uint32 pulse_b = 20;
      uint32 boost_a = 21;
      uint32 boost_b = 22;
      uint32 pause_counter = 23;
    };
    message CapacitiveMemoryRow {
      uint32 row = 1;
      string name = 2;
      repeated uint32 value = 3;
    };
    Config config = 1;
    repeated CapacitiveMemoryRow row = 2;
  };

  message PPU {
    message PPUControlReg {
      bool inhibit_reset = 1;
      bool force_clock_on = 2;
      bool force_clock_off = 3;
    };

    message PPUStatusReg {
      bool sleep = 1;
    };

    repeated uint32 memory = 1;
    PPUControlReg ppu_control_reg = 2;
    PPUStatusReg ppu_status_reg = 3;
  };

  string chip_id = 1;
  CapacitiveMemory capacitive_memory = 2;
  Neurons neurons = 3;
  SynapseMemory synapse_memory = 4;
  SynapseMemoryConfig synapse_memory_config = 5;
  SynapseDriver synapse_driver = 6;
  RateCounter rate_counter = 7;
  CorrelationConfig correlation_config = 8;
  PPU ppu = 9;
}
